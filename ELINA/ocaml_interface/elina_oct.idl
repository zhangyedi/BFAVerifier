/*
 *
 *  This source file is part of ELINA (ETH LIbrary for Numerical Analysis).
 *  ELINA is Copyright Â© 2021 Department of Computer Science, ETH Zurich
 *  This software is distributed under GNU Lesser General Public License Version 3.0.
 *  For more information, see the ELINA project website at:
 *  http://elina.ethz.ch
 *
 *  THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 *  EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 *  THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 *  IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 *  TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL ETH ZURICH BE LIABLE FOR ANY     
 *  DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 *  SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 *  ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 *  CONTRACT, TORT OR OTHERWISE).
 *
 */

quote(MLI,"\n \n(** ELINA Ocaml wrapper for the Octagons. *)\n \n")

quote(C,"#include \"opt_oct.h\"")
quote(C,"#include \"apron_caml.h\"")

quote(C,"#define I0_CHECK_EXC(man) if (man->result.exn!=AP_EXC_NONE){ value v = camlidl_c2ml_manager_struct_ap_exclog_t(man->result.exclog,_ctx); caml_raise_with_arg(*caml_named_value(\" exception\"),v); } ")


quote(C,"typedef struct opt_oct_internal_t* internal_ptr;")

import "abstract0.idl";
import "scalar.idl";
import "interval.idl";
import "coeff.idl";
import "dim.idl";
import "linexpr0.idl";
import "lincons0.idl";
import "texpr0.idl";
import "tcons0.idl";
import "generator0.idl";
import "manager.idl";

typedef [abstract] struct opt_oct_internal_t* internal_ptr;

quote(MLMLI,"\n \n\
type t\n\
  (** ELINA's Ocaml interface for Octagons builds upon Apron.\n\n\
      Octagon domain can express constraints of the form \n\
      [+/-x_i +/- x_j >= 0].\n\n\
  *)\n\n \
")

quote(MLI,"(** Allocate a new manager for the Octagon domain. *)")
ap_manager_ptr opt_oct_manager_alloc(void);

quote(MLI,"(** No internal parameters for now... *)")
internal_ptr opt_oct_manager_get_internal(ap_manager_ptr man)
  quote(call,"_res = (internal_ptr)man->internal;");

quote(MLI,"(** Widening with scalar thresholds. *)")
ap_abstract0_ptr elina_abstract0_opt_oct_widening_thresholds(ap_manager_ptr man,ap_abstract0_ptr a1,ap_abstract0_ptr a2,struct ap_scalar_array_t array)
     quote(call,"_res = elina_abstract0_opt_oct_widening_thresholds(man,a1,a2,(ap_scalar_t**)array.p,array.size);")
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Standard narrowing. *)")
ap_abstract0_ptr elina_abstract0_opt_oct_narrowing(ap_manager_ptr man, ap_abstract0_ptr a1,ap_abstract0_ptr a2)
     quote(call,"_res = elina_abstract0_opt_oct_narrowing(man,a1,a2);")
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Perturbation. *)")
ap_abstract0_ptr elina_abstract0_opt_oct_add_epsilon(ap_manager_ptr man,ap_abstract0_ptr a,ap_scalar_ptr epsilon)
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Perturbation. *)")
ap_abstract0_ptr elina_abstract0_opt_oct_add_epsilon_bin(ap_manager_ptr man,ap_abstract0_ptr a1,ap_abstract0_ptr a2,ap_scalar_ptr epsilon)
     quote(dealloc,"I0_CHECK_EXC(man)");

quote(MLI,"(** Algorithms. *)")
const int opt_oct_pre_widening = 99;

quote(MLI,"\n(** {2 Type conversions} *)

val manager_is_opt_oct : 'a Apron.Manager.t -> bool
  (** Return [true] iff the argument manager is an ELINA octagon manager *)
val manager_of_opt_oct : t Apron.Manager.t -> 'a Apron.Manager.t
  (** Make an ELINA octagon manager generic *)
val manager_to_opt_oct : 'a Apron.Manager.t -> t Apron.Manager.t
  (** Instanciate the type of an ELINA octagon manager.
      Raises [Failure] if the argument manager is not an ELINA octagon manager *)
module Abstract0 : sig
  val is_opt_oct : 'a Apron.Abstract0.t -> bool
    (** Return [true] iff the argument value is an ELINA oct value *)
  val of_opt_oct : t Apron.Abstract0.t -> 'a Apron.Abstract0.t
    (** Make an ELINA oct value generic *)
  val to_opt_oct : 'a Apron.Abstract0.t -> t Apron.Abstract0.t
    (** Instanciate the type of an ELINA oct value.
	Raises [Failure] if the argument value is not an ELINA oct value *)
end
module Abstract1 : sig
  val is_opt_oct : 'a Apron.Abstract1.t -> bool
    (** Return [true] iff the argument value is an ELINA oct value *)
  val of_opt_oct : t Apron.Abstract1.t -> 'a Apron.Abstract1.t
    (** Make an ELINA oct value generic *)
  val to_opt_oct : 'a Apron.Abstract1.t -> t Apron.Abstract1.t
    (** Instanciate the type of an ELINA oct value.
	Raises [Failure] if the argument value is not an ELINA oct value *)
end
")

quote(ML,"
let manager_is_opt_oct man =
  let str = Apron.Manager.get_library man in
  (String.compare str \"opt_oct\")==0
let manager_of_opt_oct (man:t Apron.Manager.t) : 'a Apron.Manager.t = Obj.magic man
let manager_to_opt_oct (man:'a Apron.Manager.t) : t Apron.Manager.t =
  if manager_is_opt_oct man then
    Obj.magic man
  else
    failwith \"Opt_Oct.manager_to_opt_oct: the argument manager is not an ELINA Oct manager\"
module Abstract0 = struct
  let is_opt_oct abs =
    manager_is_opt_oct (Apron.Abstract0.manager abs)
  let of_opt_oct (abs: t Apron.Abstract0.t) : 'a Apron.Abstract0.t = Obj.magic abs
  let to_opt_oct (abs:'a Apron.Abstract0.t) : t Apron.Abstract0.t =
  if is_opt_oct abs then
    Obj.magic abs
  else
    failwith \"Opt_Oct.Abstract0.to_opt_oct: the argument value is not an ELINA oct value\"
end
module Abstract1 = struct
  let is_opt_oct abs =
    manager_is_opt_oct (Apron.Abstract1.manager abs)
  let of_opt_oct (abs: t Apron.Abstract1.t) : 'a Apron.Abstract1.t = Obj.magic abs
  let to_opt_oct (abs:'a Apron.Abstract1.t) : t Apron.Abstract1.t =
  if is_opt_oct abs then
    Obj.magic abs
  else
    failwith \"Opt_Oct.Abstract1.to_opt_oct: the argument value is not an ELINA oct value\"
end
")

quote(MLI,"\n(**
{2 Compilation information}

See {!Introduction.compilation} for complete explanations.
We just show examples with the file [mlexample.ml].

{3 Bytecode compilation}

{[ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -o mlexample.byte \\
  bigarray.cma gmp.cma apron.cma elina_oct.cma mlexample.ml]}

{[ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -make-runtime -o myrun \\
  bigarray.cma gmp.cma apron.cma elina_oct.cma

ocamlc -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -use-runtime myrun -o mlexample.byte \\
  bigarray.cma gmp.cma apron.cma elina_oct.cma mlexample.ml ]}

{3 Native-code compilation}

{[ocamlopt -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -o mlexample.opt \\
  bigarray.cmxa gmp.cmxa apron.cmxa elina_oct.cmxa mlexample.ml ]}

{3 Without auto-linking feature}

{[ocamlopt -I $MLGMPIDL_PREFIX/lib -I $APRON_PREFIX/lib -noautolink -o mlexample.opt \\
  bigarray.cmxa gmp.cmxa apron.cmxa elina_oct.cmxa mlexample.ml \\
  -cclib \"-L$MLGMPIDL_PREFIX/lib -L$APRON_PREFIX/lib \\
	  -lelina_oct_caml_debug -loptoct \\
	  -lapron_caml_debug -lapron_debug \\
	  -lgmp_caml -L$MPFR_PREFIX/lib -lmpfr -L$GMP_PREFIX/lib -lgmp \\
	  -L$CAMLIDL_PREFIX/lib/ocaml -lcamlidl \\
	  -lbigarray\" ]}

*)")
